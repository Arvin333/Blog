<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>沐雪阁</title>
    <link>http://arvin.xin/</link>
    <description>Recent content on 沐雪阁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 17 Aug 2017 16:57:27 +0800</lastBuildDate>
    
	<atom:link href="http://arvin.xin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浅谈对CSRF的认识，以及一些应对措施</title>
      <link>http://arvin.xin/post/csrf/</link>
      <pubDate>Thu, 17 Aug 2017 16:57:27 +0800</pubDate>
      
      <guid>http://arvin.xin/post/csrf/</guid>
      <description>CSRF CSRF（Cross Site Request Forgery, 跨站域请求伪造）的定义，相信大家都不陌生。它是指攻击者通过诱导用户，打开已精心设计好的页面后，发送请求到某个网站执行某个操作(修改数据)的过程。这里有以下三个前提：
1、用户已登录某可信网站(A站，以下所提到的A站都指这里的某可信网站)
2、A站存在某个请求，可以修改或保存信息(例如：/saveinfo)
3、用户在A站Session过期前打开攻击者设计好的的页面，并自动或触发发送请求(/saveinfo)
看起来要求听苛刻的，但的确存在这种情况。“即便是大名鼎鼎的 Gmail, 在 2007 年底也存在着 CSRF 漏洞，从而被黑客攻击而使 Gmail 的用户造成巨大的损失。”
想要了解怎么应对CSRF，先来看看攻击者干些什么。
攻击者能干什么 因为受同源策略限制，攻击者并不能拿到A站的任何信息（Cookies）和响应信息，他只能利用发送请求时，会带上cookies去校验登录信息或权限的特性，去修改用户的数据，来达到攻击目的。因此，一般用于获取信息而不涉及到修改信息的请求(Get)就不用担心会有CSRF危险了，重要的是能修改信息的请求。当然，如果你用Get去修改信息，那就需要考虑防范CSRF了。but这样做本身就违背了HTTP method设定的初衷，同时Get的攻击方式更为简单，一个img标签加上JavaScript就能触发。所以不建议这么做
CRSF预防措施 正所谓兵来将挡，水来土掩。了解了攻击者利用的一些原理，就对应的可以找到一些对应措施
1、在服务端验证HTTP的Referer字段。
此方法成本较小，只需要在服务端拦截请求，判断Referer是否来自于同一域名，如果不是或者不存在CSRF的话，则认为有可能是CSRF攻击，直接过滤。但这种方法也有弊端，那就是当有些人会担心Referer会泄露个人信息时（毕竟向服务器发送了自己的来源地址）。这些人会尝试去关闭Referer(可以通过添加meta &amp;lt;meta name=&amp;quot;referrer&amp;quot; content=&amp;quot;no-referrer&amp;quot;&amp;gt; 来控制。对于a标签，也可以通过添加属性(rel=&amp;ldquo;noreferrer&amp;rdquo;)来达到取消发送referer的目的，参考https://www.w3.org/TR/referrer-policy/#referrer-policies)。 这样当这些用户发起请求(包括a标签跳转，form表单提交以及Ajax)时就不会带上Referer，这个请求就会被判成有可能的CSRF攻击，因为按照上述过滤规则，请求头中无Referer的有可能会是CSRF攻击。
2、在请求地址中添加 token 并验证
此方法的核心思想就是，构造成什么样的信息，来辨别请求是从用户手中发出，还是被攻击者利用而发出的，很显然Cookie不能做到，因为用户和攻击者都能将同样的Cookie带到服务器上。
答案就是token(令牌)，它由服务端通过一定算法生成，每当用户请求页面的时候，则向用户返回的页面中带上一个全新的token。下次用户在发送请求的时候，就带上该token与服务器的token进行对比。但这token要放在哪里呢？
三种情况： 1 对于a标签跳转，在Url后面动态加上token。 此方法也有一定约束，页面有很多链接，一个一个加太麻烦，就需要在document加载完以后，通过js来辅助完成了。但这个方法对于动态生成的内容，就无能为力了。
2 对于form表单 添加一个hidden input &amp;lt;input type=”hidden” name=&amp;quot;token&amp;quot; value=”tokenvalue”/&amp;gt;
（查看PC淘宝的个人中心，其修改资料就是用的此方法）由于同源策略，攻击者是拿不到表单里的数据的。此方法也跟a标签请求有同样的问题，那就是对于多链接和动态生成的内容，js批量加上token的办法就不行了，只能手动添加。
3、对于Ajax请求(即使存在跨域的情况，请求还是会发送出去，只是说浏览器会识别到来自不同域而阻止获取返回的信息)。则默认不会带上A站的cookie。因此，从某些方面来说，是相对安全的。但是根据w3c对Ajax的一个属性的描述
 4.6.4 The withCredentials attribute client . withCredentials True when user credentials are to be included in a cross-origin request.</description>
    </item>
    
    <item>
      <title>廊上行</title>
      <link>http://arvin.xin/post/post/</link>
      <pubDate>Wed, 16 Aug 2017 21:17:30 +0800</pubDate>
      
      <guid>http://arvin.xin/post/post/</guid>
      <description>信笔诗一首 蓦然泪两行</description>
    </item>
    
    <item>
      <title>艾纹的沐雪阁</title>
      <link>http://arvin.xin/about/</link>
      <pubDate>Wed, 16 Aug 2017 17:45:39 +0800</pubDate>
      
      <guid>http://arvin.xin/about/</guid>
      <description>正文内容搭建</description>
    </item>
    
  </channel>
</rss>